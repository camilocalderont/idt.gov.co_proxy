<?php

/**
 * @file
 * Contains prevnext.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function prevnext_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the prevnext module.
    case 'help.page.prevnext':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Add a &quot;Previous/Next&quot; links to the entity display.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function prevnext_theme($existing, $type, $theme, $path) {
  $themes = [];

  $themes['prevnext'] = [
    'variables' => [
      'direction' => '',
      'text' => '',
      'id' => '',
      'url' => '',
    ],
  ];

  return $themes;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function prevnext_entity_extra_field_info() {
  $extra = [];

  $config = \Drupal::config('prevnext.settings');
  $entity_types = $config->get('prevnext_enabled_entity_types');

  if (!empty($entity_types)) {
    $entity_bundles = $config->get('prevnext_enabled_entity_bundles');

    foreach ($entity_types as $entity_type) {
      if (!empty($entity_bundles[$entity_type])) {
        foreach ($entity_bundles[$entity_type] as $entity_bundle) {
          $extra[$entity_type][$entity_bundle]['display']['prevnext_previous'] = [
            'label' => t('Previous'),
            'description' => t('Previous entity indicator'),
            'weight' => 50,
          ];
          $extra[$entity_type][$entity_bundle]['display']['prevnext_next'] = [
            'label' => t('Next'),
            'description' => t('Next entity indicator'),
            'weight' => 50,
          ];
        }
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function prevnext_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Checking if current entity is configured for prevnext or not.
  $config = \Drupal::config('prevnext.settings');
  $entity_types = $config->get('prevnext_enabled_entity_types');

  if (empty($entity_types[$entity->getEntityTypeId()])) {
    return;
  }

  $current_user = \Drupal::currentUser();
  if (!$current_user->hasPermission('view prevnext links') &&
    !$current_user->hasPermission("view {$entity->getEntityTypeId()} prevnext links")
  ) {
    return;
  }

  /** @var \Drupal\prevnext\PrevNextService $prevnext */
  $prevnext = \Drupal::service('prevnext.service');
  $previous_next = $prevnext->getPreviousNext($entity);
  $cache = [
    'contexts' => [
      'url',
      'user.permissions',
    ],
    'tags' => [
      'config:prevnext.settings',
      "{$entity->getEntityTypeId()}_list",
      "{$entity->getEntityTypeId()}_view",
    ],
  ];

  if ($display->getComponent('prevnext_previous')) {
    $items = [
      [
        'key' => 'prev',
        'direction' => 'previous',
        'text' => t('Previous'),
      ],
      [
        'key' => 'next',
        'direction' => 'next',
        'text' => t('Next'),
      ],
    ];

    foreach ($items as $item) {
      if ($previous_next[$item['key']]) {
        $path = '';
        try {
          // Try to build canonical URL for the entity type.
          $path = Url::fromRoute("entity.{$entity->getEntityTypeId()}.canonical", [$entity->getEntityTypeId() => $previous_next[$item['key']]])->toString();
        }
        catch (\Exception $e) {
        }

        if ($path) {
          $build["prevnext_{$item['direction']}"] = [
            '#theme' => 'prevnext',
            '#direction' => $item['direction'],
            '#text' => $item['text'],
            '#id' => $item['key'],
            '#url' => $path,
            '#cache' => $cache,
          ];
        }
      }
    }
  }

  // Once these links will be cached inside the entity rendered output, we will
  // add a custom cache tag to allow invalidation of all these cached info
  // later (for example when a new entity of this type is created).
  $build['#cache']['tags'][] = "prevnext-{$entity->getEntityTypeId()}-{$entity->bundle()}";
}

/**
 * Implements hook_entity_presave().
 */
function prevnext_entity_presave(EntityInterface $entity) {
  $config = \Drupal::config('prevnext.settings');
  $entity_types = $config->get('prevnext_enabled_entity_types');

  if (is_array($entity_types) && in_array($entity->getEntityTypeId(), $entity_types)) {
    $entity_bundles = $config->get('prevnext_enabled_entity_bundles');

    if (in_array($entity->bundle(), $entity_bundles[$entity->getEntityTypeId()])) {
      // We are saving an entity of a type with prevnext enabled, so invalidate
      // all cached rendered output of other entities of this type with our tag.
      Cache::invalidateTags(["prevnext-{$entity->getEntityTypeId()}-{$entity->bundle()}"]);
    }
  }
}
